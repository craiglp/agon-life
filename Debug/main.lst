Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED23-Apr-23     22:15:44     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	Life - Main
                           A     3    ; Author:	Craig Patterson
                           A     4    ; Created:	04/02/2023
                           A     5    
                           A     6    ; Conway's Game of Life for Amstrad CPC
                           A     7    ; -------------------------------------
                           A     8    ;(Fast Version)
                           A     9    ;
                           A    10    ; Amstrad CPC version written by Brian Chiha
                           A    11    ; brian.chiha@gmail.com  -- Mar 2021
                           A    12    ;
                           A    13    ; Agon Light version written by Craig Patterson
                           A    14    ; craiglp@gmail.com -- Apr 2023
                           A    15    ;
                           A    16    ; Game of Life is a cellular automation simulat
                           A    17    ; of cells that surround it.  The basic cell ru
                           A    18    ;
                           A    19    ;    * Any live cell with two or three live nei
                           A    20    ;    * Any dead cell with three live neighbours
                           A    21    ;    * All other live cells die in the next gen
                           A    22    ;
                           A    23    
                           A    24    
                           A    25    
                           A    26    			.ASSUME	ADL = 0				
                           A    27    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:		EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	22/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    
                           B    21    ; VDP control (VDU 23, 0, n)
                           B    22    ;
       00000080            B    23    vdp_gp:			EQU 	80h
       00000081            B    24    vdp_keycode:		EQU 	81h
       00000082            B    25    vdp_cursor:		EQU	82h
       00000083            B    26    vdp_scrchar:		EQU	83h
       00000084            B    27    vdp_scrpixel:		EQU	84h
       00000085            B    28    vdp_audio:		EQU	85h
       00000086            B    29    vdp_mode:		EQU	86h
       00000087            B    30    vdp_rtc:		EQU	87h
       00000088            B    31    vdp_keystate:		EQU	88h
       000000C0            B    32    vdp_logicalcoords:	EQU	C0h
       000000FF            B    33    vdp_terminalmode:	EQU	FFh
                           B    34    
                           B    35    ; MOS high level functions
                           B    36    ;
       00000000            B    37    mos_getkey:		EQU	00h
       00000001            B    38    mos_load:		EQU	01h
       00000002            B    39    mos_save:		EQU	02h
       00000003            B    40    mos_cd:			EQU	03h
       00000004            B    41    mos_dir:		EQU	04h
       00000005            B    42    mos_del:		EQU	05h
       00000006            B    43    mos_ren:		EQU	06h
       00000007            B    44    mos_mkdir:		EQU	07h
       00000008            B    45    mos_sysvars:		EQU	08h
       00000009            B    46    mos_editline:		EQU	09h
       0000000A            B    47    mos_fopen:		EQU	0Ah
       0000000B            B    48    mos_fclose:		EQU	0Bh
       0000000C            B    49    mos_fgetc:		EQU	0Ch
       0000000D            B    50    mos_fputc:		EQU	0Dh
       0000000E            B    51    mos_feof:		EQU	0Eh
       0000000F            B    52    mos_getError:		EQU	0Fh
       00000010            B    53    mos_oscli:		EQU	10h
       00000011            B    54    mos_copy:		EQU	11h
       00000012            B    55    mos_getrtc:		EQU	12h
       00000013            B    56    mos_setrtc:		EQU	13h
       00000014            B    57    mos_setintvector:	EQU	14h
                           B    58    
                           B    59    ; FatFS file access functions
                           B    60    ;
       00000080            B    61    ffs_fopen:		EQU	80h
       00000081            B    62    ffs_fclose:		EQU	81h
       00000082            B    63    ffs_fread:		EQU	82h
       00000083            B    64    ffs_fwrite:		EQU	83h
       00000084            B    65    ffs_fseek:		EQU	84h
       00000085            B    66    ffs_ftruncate:		EQU	85h
       00000086            B    67    ffs_fsync:		EQU	86h
       00000087            B    68    ffs_fforward:		EQU	87h
       00000088            B    69    ffs_fexpand:		EQU	88h
       00000089            B    70    ffs_fgets:		EQU	89h
       0000008A            B    71    ffs_fputc:		EQU	8Ah
       0000008B            B    72    ffs_fputs:		EQU	8Bh
       0000008C            B    73    ffs_fprintf:		EQU	8Ch
       0000008D            B    74    ffs_ftell:		EQU	8Dh
       0000008E            B    75    ffs_feof:		EQU	8Eh
       0000008F            B    76    ffs_fsize:		EQU	8Fh
       00000090            B    77    ffs_ferror:		EQU	90h
                           B    78    
                           B    79    ; FatFS directory access functions
                           B    80    ;
       00000091            B    81    ffs_dopen:		EQU	91h
       00000092            B    82    ffs_dclose:		EQU	92h
       00000093            B    83    ffs_dread:		EQU	93h
       00000094            B    84    ffs_dfindfirst:		EQU	94h
       00000095            B    85    ffs_dfindnext:		EQU	95h
                           B    86    
                           B    87    ; FatFS file and directory management functions
                           B    88    ;
       00000096            B    89    ffs_stat:		EQU	96h
       00000097            B    90    ffs_unlink:		EQU	97h
       00000098            B    91    ffs_rename:		EQU	98h
       00000099            B    92    ffs_chmod:		EQU	99h
       0000009A            B    93    ffs_utime:		EQU	9Ah
       0000009B            B    94    ffs_mkdir:		EQU	9Bh
       0000009C            B    95    ffs_chdir:		EQU	9Ch
       0000009D            B    96    ffs_chdrive:		EQU	9Dh
       0000009E            B    97    ffs_getcwd:		EQU	9Eh
                           B    98    
                           B    99    ; FatFS volume management and system configurat
                           B   100    ;
       0000009F            B   101    ffs_mount:		EQU	9Fh
       000000A0            B   102    ffs_mkfs:		EQU	A0h
       000000A1            B   103    ffs_fdisk		EQU	A1h
       000000A2            B   104    ffs_getfree:		EQU	A2h
       000000A3            B   105    ffs_getlabel:		EQU	A3h
       000000A4            B   106    ffs_setlabel:		EQU	A4h
       000000A5            B   107    ffs_setcp:		EQU	A5h
                           B   108    	
                           B   109    ; File access modes
                           B   110    ;
       00000001            B   111    fa_read:		EQU	01h
       00000002            B   112    fa_write:		EQU	02h
       00000000            B   113    fa_open_existing:	EQU	00h
       00000004            B   114    fa_create_new:		EQU	04h
       00000008            B   115    fa_create_always:	EQU	08h
       00000010            B   116    fa_open_always:		EQU	10h
       00000030            B   117    fa_open_append:		EQU	30h
                           B   118    	
                           B   119    ; System variable indexes for api_sysvars
                           B   120    ; Index into _sysvars in globals.asm
                           B   121    ;
       00000000            B   122    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   123    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   124    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   125    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   126    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   127    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   128    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   129    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   130    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   131    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   132    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   133    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   134    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   135    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   136    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   137    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   138    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   139    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   140    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   141    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   142    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   143    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   144    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   145    	
                           B   146    ; Flags for the VPD protocol
                           B   147    ;
       00000001            B   148    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   149    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   150    vdp_pflag_point:	EQU	00000100b
       00000008            B   151    vdp_pflag_audio:	EQU	00001000b
       00000010            B   152    vdp_pflag_mode:		EQU	00010000b
       00000020            B   153    vdp_pflag_rtc:		EQU	00100000b
                           B   154    	
                           B   155    ;
                           B   156    ; Macro for calling the API
                           B   157    ; Parameters:
                           B   158    ; - function: One of the function numbers liste
                           B   159    ;
                           B   160    MOSCALL:		MACRO	function
                           B   161    			LD	A, function
                           B   162    			RST.LIS	08h
                           B   163    			ENDMACRO 	
                           A    30    			
                           A    31    			SEGMENT CODE
                           A    32    						
                           A    33    			XDEF	_main
                           A    34    			
       00000000            A    35    			SCRMODE		EQU		0h				
       00000019            A    36    			ROWS        EQU     25             
       00000028            A    37    			COLS        EQU     40             
                           A    38    			
       000001B8            A    39    			CURRBASE    EQU     _MATRIX_START  
       000001E2            A    40    			CURRSTART   EQU     CURRBASE+COLS+2
                           A    41    
       000005A0            A    42    			NEXTBASE    EQU     CURRBASE+(ROWS 
       000005CA            A    43    			NEXTSTART   EQU     NEXTBASE+COLS+2
                           A    44    			
       0000005D            A    45    			TOT_CELLS	EQU		(ROWS * 2) + CO
                           A    46    			
       0000002A            A    47                UPPER_LEFT		EQU		COLS+2		
       00000029            A    48                UPPER_MID		EQU		COLS+1		
       00000028            A    49                UPPER_RIGHT		EQU		COLS		
       00000001            A    50                MID_LEFT		EQU		1			
       00000001            A    51                MID_RIGHT		EQU		1			
       00000028            A    52                BOTTOM_LEFT		EQU		COLS		
       00000029            A    53                BOTTOM_MID		EQU		COLS+1		
       0000002A            A    54                BOTTOM_RIGHT	EQU		COLS+2		
                           A    55    
                           A    56    
                           A    57    ;Calcuation for next cells are done from memory
                           A    58    ;what is displayed
                           A    59    ;on the screen, Next Base is used to place the 
                           A    60    ;Next Base will be copied to Current Base
                           A    61    ;
                           A    62    ;To Work out top/bottom cells, I place a zero r
                           A    63    ;handle left/right cells, I place one zero colu
                           A    64    ;I have one extra byte.
                           A    65    ;
                           A    66    ;If Cell is alive it will be set to 1, if it is
                           A    67    
                           A    68    ; Memory Map With Upper/Lower/Left/Right buffer
                           A    69    ; X = potential cell position, 0 = always zero
                           A    70    ;   000102030405060708090A0B0C0D0E0F10111213141
                           A    71    ;00  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
                           A    72    ;01  0 X X X X X X X X X X X X X X X X X X X X 
                           A    73    ;02  0 X X X X X X X X X X X X X X X X X X X X 
                           A    74    ;03  0 X X X X X X X X X X X X X X X X X X X X 
                           A    75    ;04  0 X X X X X X X X X X X X X X X X X X X X 
                           A    76    ;05  0 X X X X X X X X X X X X X X X X X X X X 
                           A    77    ;06  0 X X X X X X X X X X X X X X X X X X X X 
                           A    78    ;07  0 X X X X X X X X X X X X X X X X X X X X 
                           A    79    ;08  0 X X X X X X X X X X X X X X X X X X X X 
                           A    80    ;09  0 X X X X X X X X X X X X X X X X X X X X 
                           A    81    ;0A  0 X X X X X X X X X X X X X X X X X X X X 
                           A    82    ;0B  0 X X X X X X X X X X X X X X X X X X X X 
                           A    83    ;0C  0 X X X X X X X X X X X X X X X X X X X X 
                           A    84    ;0D  0 X X X X X X X X X X X X X X X X X X X X 
                           A    85    ;0E  0 X X X X X X X X X X X X X X X X X X X X 
                           A    86    ;0F  0 X X X X X X X X X X X X X X X X X X X X 
                           A    87    ;10  0 X X X X X X X X X X X X X X X X X X X X 
                           A    88    ;11  0 X X X X X X X X X X X X X X X X X X X X 
                           A    89    ;12  0 X X X X X X X X X X X X X X X X X X X X 
                           A    90    ;13  0 X X X X X X X X X X X X X X X X X X X X 
                           A    91    ;14  0 X X X X X X X X X X X X X X X X X X X X 
                           A    92    ;15  0 X X X X X X X X X X X X X X X X X X X X 
                           A    93    ;16  0 X X X X X X X X X X X X X X X X X X X X 
                           A    94    ;17  0 X X X X X X X X X X X X X X X X X X X X 
                           A    95    ;18  0 X X X X X X X X X X X X X X X X X X X X 
                           A    96    ;19  0 X X X X X X X X X X X X X X X X X X X X 
                           A    97    ;1A  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
                           A    98    ;1B  0  <= needed for last bottom right check
                           A    99    
                           A   100    
                           A   101    
000142                     A   102    _main:		
                           A   103    			;Set screen mode
000142 3E16                A   104    			LD		A, 22		;VDU 22
000144 5BD7                A   105    			RST.LIL	10h
000146 3E00                A   106    			LD		A, SCRMODE	;Screen mode
000148 5BD7                A   107    			RST.LIL	10h	
                           A   108    			
                           A   109    			;Disable text cursor
00014A 3E17                A   110    			LD		A, 23		;VDU 23
00014C 5BD7                A   111    			RST.LIL	10h
00014E 3E01                A   112    			LD		A, 1
000150 5BD7                A   113    			RST.LIL	10h			
000152 3E00                A   114    			LD		A, 0
000154 5BD7                A   115    			RST.LIL	10h			
                           A   116    
                           A   117    			;CALL	_TEST
                           A   118    			;LD 		HL, _TEST
                           A   119    			;CALL	Print_String
000156                     A   120    START:
000156 21 FA 02            A   121                LD      HL,CURRBASE     ;Clear Curr
000159 11 FB 02            A   122                LD      DE,CURRBASE+1 
00015C AF                  A   123                XOR     A               ;Set to Zer
00015D 77                  A   124                LD      (HL),A 
00015E 015D00              A   125                LD      BC,TOT_CELLS    ;Cells to b
000161 EDB0                A   126                LDIR                    ;Do the Cop
000163 21 A0 05            A   127                LD      HL,NEXTBASE     ;Clear Next
000166 11 A1 05            A   128                LD      DE,NEXTBASE+1 
000169 AF                  A   129                XOR     A               ;Set to Zer
00016A 77                  A   130                LD      (HL),A 
00016B 015D00              A   131                LD      BC,TOT_CELLS    ;1108 cells
00016E EDB0                A   132                LDIR                    ;Do the Cop
                           A   133    			
000170                     A   134    NEWCELLS:            
000170 CD ED 01            A   135                CALL    LOAD_RANDOM		;Initialize
                           A   136    
000173                     A   137    LIFE:
000173 CD 15 02            A   138    			CALL	PRINT_CELLS
                           A   139    			;CALL    DISPLAY_CELLS	;Fill scree
                           A   140    			
000176 CD 9E 01            A   141                CALL    CONWAY			;Do Conway 
                           A   142    			
                           A   143    			;Loop until key pressed			
                           A   144    			MOSCALL	mos_getkey
00017D B7                  A   145    			OR		A 		
00017E 28 F3               A   146    			JR		Z, LIFE
                           A   147    			
000180 FE1B                A   148                CP      ESC				;Escape pre
000182 20 EF               A   149                JR      NZ,LIFE			;Key presse
                           A   150    
000184 21 DC 02            A   151    			LD		HL, s_LIFE3		;Escape pre
000187 010000              A   152    			LD		BC, 0
00018A 3E00                A   153    			LD		A, 0
00018C 49DF                A   154    			RST.LIS	18h
                           A   155    											
00018E                     A   156    	FINI:	
                           A   157    			;Enable text cursor
00018E 3E17                A   158    			LD		A, 23		;VDU 23
000190 5BD7                A   159    			RST.LIL	10h
000192 3E01                A   160    			LD		A, 1
000194 5BD7                A   161    			RST.LIL	10h			
000196 3E01                A   162    			LD		A, 1
000198 5BD7                A   163    			RST.LIL	10h			
                           A   164    
00019A 210000              A   165    			LD		HL, 0			;Return, Er
00019D C9                  A   166    			RET
                           A   167    
                           A   168                ;Update the matrix with Conway Rule
                           A   169    			;The basic cell rules are:
                           A   170    			;
                           A   171    			;    * Any live cell with two or th
                           A   172    			;    * Any dead cell with three liv
                           A   173    			;    * All other live cells die in 
00019E                     A   174    CONWAY:
00019E DD21 E2 01          A   175                LD      IX,CURRSTART
0001A2 21 CA 05            A   176                LD      HL,NEXTSTART
0001A5 0619                A   177                LD      B,ROWS
0001A7                     A   178    	NEWROW:              
0001A7 C5                  A   179                PUSH    BC ;Save Registers
0001A8 0628                A   180                LD      B,COLS ;40 Columns
0001AA                     A   181    	NEWCOL:              
                           A   182                ;Check the current cell and update 
                           A   183                ;make checking easier
0001AA DD7ED6              A   184                LD      A,(IX-UPPER_LEFT)          
0001AD DD86D7              A   185                ADD     A,(IX-UPPER_MID)           
0001B0 DD86D8              A   186                ADD     A,(IX-UPPER_RIGHT)         
0001B3 DD86FF              A   187                ADD     A,(IX-MID_LEFT)            
0001B6 DD8601              A   188                ADD     A,(IX+MID_RIGHT)           
0001B9 DD8628              A   189                ADD     A,(IX+BOTTOM_LEFT)         
0001BC DD8629              A   190                ADD     A,(IX+BOTTOM_MID)          
0001BF DD862A              A   191                ADD     A,(IX+BOTTOM_RIGHT)        
                           A   192    			
0001C2                     A   193    		EVALUATE:       
                           A   194                ;Evaluate surrounding cell count to
                           A   195                ;This is the rules being applied fo
0001C2 1601                A   196                LD      D,01h                ;Alive
0001C4 FE03                A   197                CP      03h                  ;Check
0001C6 28 0C               A   198                JR      Z,STOREC             ;Save 
0001C8 1600                A   199                LD      D,00h                ;Dead
0001CA FE02                A   200                CP      02h                  ;Check
0001CC 20 06               A   201                JR      NZ,STOREC            ;Save 
0001CE DD7E00              A   202                LD      A,(IX+0)             ;Curre
0001D1 E601                A   203                AND     01h                  ;Keep 
0001D3 57                  A   204                LD      D,A                  ;Load 
                           A   205    			
0001D4                     A   206    		STOREC:              
                           A   207                ;Save the new cell to the Next Cell
0001D4 7A                  A   208                LD      A,D                  ;D sto
0001D5 77                  A   209                LD      (HL),A               ;Updat
0001D6 23                  A   210                INC     HL                   ;Move 
0001D7 DD23                A   211                INC     IX                   ;Move 
0001D9 10 CF               A   212                DJNZ    NEWCOL               ;Repea
                           A   213    
0001DB 23                  A   214                INC     HL                   ;Skip 
0001DC DD23                A   215                INC     IX                   ;Skip 
0001DE C1                  A   216                POP     BC 
0001DF 10 C6               A   217                DJNZ    NEWROW               ;Repea
                           A   218    
                           A   219                ;Copy next matrix to current
0001E1 21 CA 05            A   220                LD      HL,NEXTSTART 
0001E4 11 E2 01            A   221                LD      DE,CURRSTART 
0001E7 010004              A   222                LD      BC,0400h             ;1024 
0001EA EDB0                A   223                LDIR                         ;Do th
                           A   224    
0001EC C9                  A   225                RET                          ;Exit
                           A   226    			
                           A   227    
                           A   228    			;Load Random cells in memory.  This
                           A   229                ;an psuedo random routine.  If that
                           A   230                ;cell to Alive.
0001ED                     A   231    LOAD_RANDOM:
0001ED 21 E2 01            A   232    			LD      HL,CURRSTART 
0001F0 0619                A   233                LD      B,ROWS 
0001F2                     A   234    	COL:									;Co
0001F2 C5                  A   235                PUSH    BC 
0001F3 0628                A   236                LD      B,COLS 
0001F5                     A   237    	ROW:								;Rows
0001F5 CD 63 02            A   238                CALL    RAND_8				;Call r
0001F8 3E01                A   239                LD      A,01h				;Defaul
0001FA 38 01               A   240                JR      C,STORECELL 
0001FC AF                  A   241                XOR     A					;Set to
0001FD                     A   242    	STORECELL:           
0001FD 77                  A   243                LD      (HL),A				;Store 
0001FE 23                  A   244                INC     HL 
0001FF 10 F4               A   245                DJNZ    ROW 
000201 23                  A   246                INC     HL					;Skip l
000202 C1                  A   247                POP     BC 
000203 10 ED               A   248                DJNZ    COL 
000205 C9                  A   249                RET							;Exit
                           A   250    
                           A   251                ;Random boolean value.  Carry flag 
000206                     A   252    	RAND:                
000206 C5                  A   253                PUSH    BC 
000207 ED5F                A   254                LD      A,R                  ;Rando
000209 47                  A   255                LD      B,A 
00020A 0F                  A   256                RRCA                         ;Multi
00020B 0F                  A   257                RRCA     
00020C 0F                  A   258                RRCA     
00020D EE1F                A   259                XOR     1Fh 
00020F 80                  A   260                ADD     A,B 
000210 DEFF                A   261                SBC     A,FFh 
000212 C1                  A   262                POP     BC 
000213 0F                  A   263                RRCA                         ;Check
000214 C9                  A   264                RET      
                           A   265    
000215                     A   266    PRINT_CELLS:
000215 3E0C                A   267    			LD		A,12				;Clear 
000217 5BD7                A   268    			RST.LIL	10h
                           A   269    			
000219 DD21 E2 01          A   270    			LD      IX,CURRSTART 
00021D 0619                A   271    			LD		B,ROWS
00021F                     A   272    	col_loop:
00021F C5                  A   273    			PUSH	BC
000220 0628                A   274    			LD		B,COLS
000222                     A   275    	row_loop:
000222 DD7E00              A   276    			LD		A,(IX)
000225 CD 3A 02            A   277    			CALL	Print_Cell
                           A   278    			
000228 DD23                A   279    			INC		IX
00022A 10 F6               A   280    			DJNZ	row_loop
                           A   281    
                           A   282    			;Print CR/LF after each row
00022C 57                  A   283    			LD		D, A
00022D 3E0D                A   284    			LD		A, 0Dh
00022F 49D7                A   285    			RST.LIS	10h
000231 3E0A                A   286    			LD		A, 0Ah
000233 49D7                A   287    			RST.LIS	10h
000235 7A                  A   288    			LD		A, D
                           A   289    			
000236 C1                  A   290    			POP		BC
000237 10 E6               A   291    			DJNZ	col_loop
000239 C9                  A   292    			RET							;Exit
                           A   293    
00023A                     A   294    Print_Cell:
00023A 4F                  A   295    			LD C,A
00023B FE01                A   296    			CP 01h
00023D 3E20                A   297    			LD A, 20h
00023F 20 02               A   298    			JR NZ,PZ
000241 3E31                A   299    			LD A, 31h
000243 49D7                A   300    	PZ:		RST.LIS 10h
000245 79                  A   301    			LD A,C
000246 C9                  A   302    			RET
                           A   303    			
000247                     A   304    Print_String:
000247 010000              A   305    			LD		BC, 0
00024A 3E00                A   306    			LD		A, 0
00024C 49DF                A   307    			RST.LIS	18h
00024E C9                  A   308    			RET
                           A   309    
                           A   310    ; Print an 8-bit HEX number
                           A   311    ; A: Number to print
00024F                     A   312    Print_Hex8:
00024F 4F                  A   313    			LD		C,A
000250 1F                  A   314    			RRA 
000251 1F                  A   315    			RRA 
000252 1F                  A   316    			RRA 
000253 1F                  A   317    			RRA 
000254 CD 58 02            A   318    			CALL	$F 
000257 79                  A   319    			LD		A,C 
000258 E60F                A   320    $$:			AND		0Fh
00025A C690                A   321    			ADD		A,90h
00025C 27                  A   322    			DAA
00025D CE40                A   323    			ADC		A,40h
00025F 27                  A   324    			DAA
000260 49D7                A   325    			RST.LIS	10h
000262 C9                  A   326    			RET
                           A   327    			
                           A   328    ; returns pseudo random 8 bit number in A. Only
                           A   329    ; (r_seed) is the byte from which the number is
                           A   330    ; initialised to a non zero value or this funct
                           A   331    ; zero. Also r_seed must be in RAM, you can see
000263                     A   332    RAND_8:
                           A   333    			;LD A,R
                           A   334    			;ADD A, 1
                           A   335    			;LD (r_seed), A
                           A   336    
000263 3A 75 02            A   337    			LD	A,(r_seed)	; get seed
000266 E6B8                A   338    			AND	#B8h		; mask non feedback
000268 37                  A   339    			SCF				; set carry
000269 E2 6D 02            A   340    			JP	PO,no_clr	; skip clear if odd
00026C 3F                  A   341    			CCF				; complement carry 
00026D                     A   342    	no_clr:
00026D 3A 75 02            A   343    			LD	A,(r_seed)	; get seed back
000270 17                  A   344    			RLA				; rotate carry into
000271 32 75 02            A   345    			LD	(r_seed),A	; save back for nex
000274 C9                  A   346    			RET				; done
000275                     A   347    	r_seed:
000275 FE                  A   348    			DB	254			; prng seed byte (m
                           A   349    	
000276                     A   350    RAND_0:
000276 DDE5                A   351    			push	IX
000278 DD210000            A   352    			ld		IX,#0
00027C DD39                A   353    			add		IX,SP
00027E DD4E00              A   354    			ld		C,(ix)    ;get the Mask
000281 3A F9 02            A   355    			ld		A,(_SEED)  ;get the Seed
000284 47                  A   356    			ld		B,A	
000285 ED5F                A   357    			ld		A,R  
000287 80                  A   358    			add		A,B        ;add the value o
000288 47                  A   359    			ld		B,A
000289 ED5F                A   360    			ld		A,R
00028B 07                  A   361    			rlca            ;rotation to the le
00028C 90                  A   362    			sub		A,B        ;and subtracts i
00028D 32 F9 02            A   363    			ld		(_SEED),A  ;save as Seed 
000290 A1                  A   364    			and		C          ;apply the Mask
000291 6F                  A   365    			ld		L,A        ;return L
000292 DDE1                A   366    			pop		IX
000294 C9                  A   367    			ret
                           A   368    			
000295                     A   369    _TEST:	
000295 21 9D 02            A   370    			LD HL, s_RTC
                           A   371    			MOSCALL mos_getrtc
00029C C9                  A   372    			RET
                           A   373    
                           A   374    ; Text strings
                           A   375    ;
00029D 00                  A   376    s_RTC:		DB	0
                           A   377    
00029E 436F6E77 61792053   A   378    s_CONWAY1:	DB	"Conway Start\n\r", 0
0002A6 74617274 0A0D00 
0002AD 0A0D4761 6D65206F   A   379    s_LIFE:		DB 	"\n\rGame of Life\n\r", 0
0002B5 66204C69 66650A0D 
0002BD 00 
0002BE 0A0D4C6F 61642052   A   380    s_LIFE1:	DB 	"\n\rLoad Random\n\r", 0
0002C6 616E646F 6D0A0D00 
0002CE 5072696E 74204365   A   381    s_LIFE2:	DB 	"Print Cells\n\r", 0
0002D6 6C6C730A 0D00 
0002DC 0A0D4669 6E697368   A   382    s_LIFE3:	DB 	"\n\rFinished\n\r", 0
0002E4 65640A0D 00 
0002E9 0A0D436F 6E776179   A   383    s_LIFE4:	DB 	"\n\rConway\n\r", 0
0002F1 0A0D00 
0002F4 0A0D00              A   384    s_cr_lf:	DB	"\n\r", 0
0002F7 0D00                A   385    s_cr:		DB	"\r", 0
                           A   386    
                           A   387    
0002F9 00                  A   388    _SEED:		DB
                           A   389    	
0002FA                     A   390    _MATRIX_START:
                           A   391    	
                           A   392    ; RAM
                           A   393    ; 
                           A   394    			DEFINE	LORAM, SPACE = ROM
                           A   395    			SEGMENT LORAM
                           A   396    			


Errors: 0
Warnings: 0
Lines Assembled: 659
