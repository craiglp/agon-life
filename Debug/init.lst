Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED23-Apr-23     22:21:52     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	Game of Life - Initialisation Code
                           A     3    ; Author:	Dean Belfield
                           A     4    ; Created:	06/11/2022
                           A     5    ; Last Updated:	18/12/2022
                           A     6    ;
                           A     7    ; Modinfo:
                           A     8    ; 17/12/2022:	Added parameter processing
                           A     9    ; 18/12/2022:	SPS now set to 8000h (fix sugge
                           A    10    
                           A    11    			SEGMENT __VECTORS
                           A    12    		
                           A    13    			XREF	_main
                           A    14    		
                           A    15    			.ASSUME	ADL = 0
                           A    16    				
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:		EQU     1BH
                           A    18    			
       00000010            A    19    argv_ptrs_max:		EQU	16				; Maxim
                           A    20    						
                           A    21    ;
                           A    22    ; Start in mixed mode. Assumes MBASE is set to 
                           A    23    ;
000000 C3 4E 00            A    24    			JP		_start			; Jump to s
000003                     A    25    			DS		5
                           A    26    
000008 49CF                A    27    RST_08:			RST.LIS		08h			; API c
00000A C9                  A    28    			RET
00000B                     A    29    			DS 		5
                           A    30    			
000010 49D7                A    31    RST_10:			RST.LIS 	10h			; Outpu
000012 C9                  A    32    			RET
000013                     A    33    			DS		5
                           A    34    			
000018                     A    35    RST_18:			DS		8
000020                     A    36    RST_20:			DS		8
000028                     A    37    RST_28:			DS		8
000030                     A    38    RST_30:			DS		8	
                           A    39    ;	
                           A    40    ; The NMI interrupt vector (not currently used 
                           A    41    ;
000038 FB                  A    42    RST_38:			EI
000039 ED4D                A    43    			RETI
                           A    44    			
                           A    45    ;
                           A    46    ; The header stuff is from byte 64 onwards
                           A    47    ;
                           A    48    			ALIGN	64
                           A    49    			
000040 4D4F53              A    50    			DB	"MOS"				; Flag for 
000043 00                  A    51    			DB	00h				; MOS header ve
000044 00                  A    52    			DB	00h				; Flag for run 
                           A    53    
                           A    54    			SEGMENT	CODE
                           A    55    
000045 4C494645 2E42494E   A    56    _exec_name:		DB	"LIFE.BIN", 0			; T
00004D 00 
                           A    57    
                           A    58    ;
                           A    59    ; And the code follows on immediately after the
                           A    60    ;
00004E 5BFDE5              A    61    _start:			PUSH.LIL	IY			; Prese
                           A    62    
000051 FD210000            A    63    			LD		IY, 0			; Preserve 
000055 FD39                A    64    			ADD		IY, SP
000057 5BFDE5              A    65    			PUSH.LIL	IY
00005A 310080              A    66    			LD		SP, 8000h		; And set t
                           A    67    	
00005D F5                  A    68    			PUSH		AF			; Preserve 
00005E 5BC5                A    69    			PUSH.LIL	BC
000060 5BD5                A    70    			PUSH.LIL	DE
000062 5BDDE5              A    71    			PUSH.LIL	IX
                           A    72    
000065 ED6E                A    73    			LD		A, MB			; Segment b
000067 DD21 12 01          A    74    			LD		IX, argv_ptrs		; The a
00006B CD FE 00            A    75    			CALL		_set_aix24		; Conve
00006E 5BDDE5              A    76    			PUSH.LIL	IX
000071 CD 8E 00            A    77    			CALL		_parse_params		; P
000074 5BDDE1              A    78    			POP.LIL		IX			; IX: argv
000077 0600                A    79    			LD		B, 0			;  C: argc
000079 CD 42 01            A    80    			CALL		_main			; Start
                           A    81    
00007C 5BDDE1              A    82    			POP.LIL		IX			; Restore t
00007F 5BD1                A    83    			POP.LIL		DE
000081 5BC1                A    84    			POP.LIL		BC
000083 F1                  A    85    			POP		AF
                           A    86    
000084 5BFDE1              A    87    			POP.LIL		IY			; Get the p
000087 FDF9                A    88    			LD		SP, IY			; Restore t
                           A    89    			
000089 5BFDE1              A    90    			POP.LIL		IY			; Restore I
00008C 49C9                A    91    			RET.L					; Return to
                           A    92    			
                           A    93    ; Parse the parameter string into a C array
                           A    94    ; Parameters
                           A    95    ; -   A: Segment base
                           A    96    ; - HLU: Address of parameter string
                           A    97    ; - IXU: Address for array pointer storage
                           A    98    ; Returns:
                           A    99    ; -   C: Number of parameters parsed
                           A   100    ;
00008E 01 45 00            A   101    _parse_params:		LD		BC, _exec_name		
000091 CD EC 00            A   102    			CALL		_set_abc24		; Conve
000094 5BDD0F00            A   103    			LD.LIL		(IX+0), BC		; ARGV[
000098 5BDD23              A   104    			INC.LIL		IX
00009B 5BDD23              A   105    			INC.LIL		IX
00009E 5BDD23              A   106    			INC.LIL		IX
0000A1 CD E3 00            A   107    			CALL		_skip_spaces		; S
                           A   108    ;
0000A4 010100              A   109    			LD		BC, 1			; C: ARGC =
0000A7 060F                A   110    			LD		B, argv_ptrs_max - 1	; B
                           A   111    ;
0000A9 C5                  A   112    _parse_params_1:	PUSH		BC			; S
0000AA 5BE5                A   113    			PUSH.LIL	HL			; Stack sta
0000AC CD D2 00            A   114    			CALL		_get_token		; Get t
0000AF 79                  A   115    			LD		A, C			; A: Length
0000B0 5BD1                A   116    			POP.LIL		DE			; Start add
0000B2 C1                  A   117    			POP		BC			; ARGC
0000B3 B7                  A   118    			OR		A			; Check for A=0
0000B4 C8                  A   119    			RET		Z
                           A   120    ;
0000B5 5BDD1F00            A   121    			LD.LIL		(IX+0), DE		; Store
0000B9 5BE5                A   122    			PUSH.LIL	HL			; DE=HL
0000BB 5BD1                A   123    			POP.LIL		DE
0000BD CD E3 00            A   124    			CALL		_skip_spaces		; A
0000C0 AF                  A   125    			XOR		A
0000C1 5B12                A   126    			LD.LIL		(DE), A			; Zero-
0000C3 5BDD23              A   127    			INC.LIL		IX
0000C6 5BDD23              A   128    			INC.LIL		IX
0000C9 5BDD23              A   129    			INC.LIL		IX			; Advance t
0000CC 0C                  A   130    			INC		C			; Increment ARG
0000CD 79                  A   131    			LD		A, C			; Check for
0000CE B8                  A   132    			CP		B
0000CF 38 D8               A   133    			JR		C, _parse_params_1	; And l
0000D1 C9                  A   134    			RET
                           A   135    
                           A   136    ; Get the next token
                           A   137    ; Parameters:
                           A   138    ; - HL: Address of parameter string
                           A   139    ; Returns:
                           A   140    ; - HL: Address of first character after token
                           A   141    ; -  C: Length of token (in characters)
                           A   142    ;
0000D2 0E00                A   143    _get_token:		LD		C, 0			; Initi
0000D4 5B7E                A   144    $$:			LD.LIL		A, (HL)			; Get t
0000D6 B7                  A   145    			OR		A			; Exit if 0 (en
0000D7 C8                  A   146    			RET 		Z
0000D8 FE0D                A   147    			CP		13			; Exit if CR (e
0000DA C8                  A   148    			RET		Z
0000DB FE20                A   149    			CP		' '			; Exit if space
0000DD C8                  A   150    			RET		Z
0000DE 5B23                A   151    			INC.LIL		HL			; Advance t
0000E0 0C                  A   152    			INC 		C			; Increment
0000E1 18 F1               A   153    			JR		$B
                           A   154    	
                           A   155    ; Skip spaces in the parameter string
                           A   156    ; Parameters:
                           A   157    ; - HL: Address of parameter string
                           A   158    ; Returns:
                           A   159    ; - HL: Address of next none-space character
                           A   160    ;    F: Z if at end of string, otherwise NZ if 
                           A   161    ;
0000E3 5B7E                A   162    _skip_spaces:		LD.LIL		A, (HL)			
0000E5 FE20                A   163    			CP		' '			; Exit if not s
0000E7 C0                  A   164    			RET		NZ
0000E8 5B23                A   165    			INC.LIL		HL			; Advance t
0000EA 18 F7               A   166    			JR		_skip_spaces		; Incre
                           A   167    			
                           A   168    ; Set the MSB of BC (U) to A
                           A   169    ; Parameters:
                           A   170    ; - BC: 16-bit address
                           A   171    ; -  A: Value to stick in U of BC
                           A   172    ; Returns:
                           A   173    ; - BCU
                           A   174    ;
0000EC 5BE5                A   175    _set_abc24:		PUSH.LIL	HL			; Prese
0000EE 5BC5                A   176    			PUSH.LIL	BC			; Stick BC 
0000F0 5B210200 00         A   177    			LD.LIL		HL, 2			; HL: S
0000F5 5B39                A   178    			ADD.LIL		HL, SP
0000F7 5B77                A   179    			LD.LIL		(HL), A			; Store
0000F9 5BC1                A   180    			POP.LIL		BC			; Fetch amm
0000FB 5BE1                A   181    			POP.LIL		HL			; Restore H
0000FD C9                  A   182    			RET
                           A   183    
                           A   184    ; Set the MSB of BC (U) to A
                           A   185    ; Parameters:
                           A   186    ; - IX: 16-bit address
                           A   187    ; -  A: Value to stick in U of BC
                           A   188    ; Returns:
                           A   189    ; - IXU
                           A   190    ;
0000FE 5BDDE5              A   191    _set_aix24:		PUSH.LIL	IX			; Stick
000101 5BDD2102 0000       A   192    			LD.LIL		IX, 2			; IX: S
000107 5BDD39              A   193    			ADD.LIL		IX, SP
00010A 5BDD7700            A   194    			LD.LIL		(IX), A			; Store
00010E 5BDDE1              A   195    			POP.LIL		IX			; Fetch amm
000111 C9                  A   196    			RET
                           A   197    			
                           A   198    ; Storage for the argv array pointers
                           A   199    ;
000112 000000 000000       A   200    argv_ptrs:		BLKP	argv_ptrs_max, 0		
000118 000000 000000 
00011E 000000 000000 
000124 000000 000000 
00012A 000000 000000 
000130 000000 000000 
000136 000000 000000 
00013C 000000 000000 


Errors: 0
Warnings: 0
Lines Assembled: 294
